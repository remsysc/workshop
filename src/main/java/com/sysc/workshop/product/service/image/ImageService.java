package com.sysc.workshop.product.service.image;

import com.sysc.workshop.product.dto.ImageDto;
import com.sysc.workshop.product.exception.ImageNotFoundException;
import com.sysc.workshop.product.mapper.ImageMapper;
import com.sysc.workshop.product.model.Image;
import com.sysc.workshop.product.model.Product;
import com.sysc.workshop.product.repository.ImageRepository;
import com.sysc.workshop.product.service.product.IProductService;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
@RequiredArgsConstructor
public class ImageService implements IImageService {

    private final ImageRepository imageRepository;
    private final IProductService iProductService;
    private final ImageMapper imageMapper;

    @Override
    public List<ImageDto> saveImages(
        List<MultipartFile> files,
        UUID productId
    ) {
        Product product = iProductService.getProductEntityById(productId); //Load the product
        List<Image> savedImages = new ArrayList<>();
        String baseUrl = "/api/v1/images/"; // set the dl url prefix
        for (MultipartFile file : files) {
            try {
                // build a fresh image entity and  link it to the product
                Image image = new Image();
                setImage(file, image, product);

                //get an id generated by database
                Image savedImage = imageRepository.save(image);
                //set the id to get the real download url
                savedImage.setDownloadUrl(
                    baseUrl + savedImage.getId() + "/download"
                );
                //persist the updated url
                imageRepository.save(image);
                savedImages.add(savedImage);
            } catch (IOException | SQLException e) {
                throw new RuntimeException(e.getMessage());
            }
        }

        return imageMapper.toDtoList(savedImages);
    }

    private static void setImage(
        MultipartFile file,
        Image image,
        Product product
    ) throws SQLException, IOException {
        image.setFileName(file.getOriginalFilename());
        image.setFileType(file.getContentType());
        image.setImageData(file.getBytes());
        image.setProduct(product);
    }

    @Override
    public void updateImage(MultipartFile file, UUID imageId) {
        //find the image
        Image image = getImageEntityById(imageId); // throws exception if not found
        try {
            image.setFileName(file.getOriginalFilename());
            image.setImageData(file.getBytes());
            imageRepository.save(image);
        } catch (IOException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public ImageDto getImageById(UUID id) {
        return imageMapper.toDto(
            imageRepository
                .findById(id)
                .orElseThrow(() ->
                    new ImageNotFoundException(
                        "No image not found with id: " + id
                    )
                )
        );
    }

    @Override
    public Image getImageEntityById(UUID id) {
        return imageRepository
            .findById(id)
            .orElseThrow(() ->
                new ImageNotFoundException("No image not found with id: " + id)
            );
    }

    @Override
    public void deleteImageById(UUID id) {
        imageRepository
            .findById(id)
            .ifPresentOrElse(imageRepository::delete, () -> {
                throw new ImageNotFoundException("Image Not Found!");
            });
    }
}
